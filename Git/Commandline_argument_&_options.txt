命令列參數與選項 | Commandline auguments & options
	git config
		--global
			修改全域而非內容倉庫(content repository)範圍的設定值
		user.email 「committer的電子郵件地址」
			修改 committer 的電子郵件地址
		merge.tool 「使用的軟體路徑」
			設定merge conflict時要用的diff工具，例如vimdiff、gvimdiff
		core.editor 「使用的軟體路徑」
			設定commit時要用的文字編輯軟體，例如emacs、vi(m)、nano
		--list
			列出所有設定值
		「設定值的名稱」
			列出特定設定值的名稱
		credential.helper 「保存模式」
			用特定模式暫時保存HTTPS連線的cookie？模式列表如下
				cache
	git help
		「命令名稱」
			顯示指定命令的使用手冊
	git add
		「檔案／目錄名稱」
			加入指定檔案／目錄的變更內容到 staging area 中（可用萬用字元）
		-A, --all
			加入所有目前被追蹤的檔案的變更內容到 staging area 中
		--interactive　-i
			進入交談模式（請參閱git add使用手冊「INTERACTIVE MODE」的部份）
		--
			此選項可以用來區隔選項與「檔案／目錄名稱」
	git rm
		「檔案／目錄名稱」
			將檔案／目錄自 working tree 中移除（可用萬用字元）
		--recursive -r
			如果「檔案／目錄名稱」為目錄則連同子目錄一起移除
		--cached
			將檔案／目錄自 staging area 中移除
		--dry-run
			印出而非實際移除會被移除的檔案
	git mv
		「更名前檔案名稱」 「更名後檔案名稱」
			更動有被追蹤版本的檔案／目錄的名稱
	git clone
		「內容倉庫(content repository)的網路位址」
			將遠端內容倉庫(content repository)最終commit的分支(branch)複製到本地端當前工作目錄(current working directory)底下的「內容倉庫(content repository)名稱」目錄
		「內容倉庫(content repository)的網路位址」 「自訂的目錄名稱」
			將遠端內容倉庫(content repository)最終commit的分支(branch)複製到本地端當前工作目錄(current working directory)底下的「自訂的目錄名稱」目錄
		--branch 「分支(branch)名稱」
			複製指定的分支(branch)而非最終commit的分支(branch)
	git diff
		無參數
			檢視已修改但未移進 staging area 的內容差異資訊
		--staged 或 --cached
			檢視移進 staging area 的內容差異資訊
		「版本Ａ」　「版本Ｂ」
			檢視「版本Ａ」與「版本Ｂ」之間的內容差異資訊
	git commit
		無參數
			將 stageing area 中的內容變更提交(commit)為一個 commit
		-m '「此commit的描述訊息」'
			直接指定commit的描述訊息
		-v
			印出更詳細的資料（包括diff）
		-a --all
			將有追蹤版本的檔案的變更直接提交（跳過移進 staging area 的步驟）
		--amend
			將內容變更合併入最後一個commit，使用範例如下
				git commit
				git add forgotten_change
				git commit --amend
	git log
		無參數
			檢視commit紀錄
		-p
			檢視包含diff的commit紀錄
		--stat
			追加顯示統計圖
		--pretty=
			以特定格式顯示commit log
				可用值：oneline, short, full, fuller
		--pretty=format:"「格式控制字串(format control string)」"
			輸出自訂格式commit log
			format specifier列表如下
				%H  Commit hash
				%h  Abbreviated commit hash
				%T  Tree hash
				%t  Abbreviated tree hash
				%P  Parent hashes
				%p  Abbreviated parent hashes
				%an Author name
				%ae Author e-mail
				%ad Author date (format respects the –date= option)
				%ar Author date, relative
				%cn Committer name
				%ce Committer email
				%cd Committer date
				%cr Committer date, relative
				%s  Subject
		--graph
			繪製出commit圖
		--since=「時刻、時距」
			檢視多久時間以前之後的commit log
			範例
				2.weeks
				2008-01-15
				2 years 1 day 3 minutes ago
		--until=「時間」
			檢視多久時間以前之前的commit log
		--author 「作者名稱」
			檢視特定作者的commit
		--grep 「關鍵字」
			以指定「關鍵字」搜索commit log
		「多個條件」 --all-match
			輸出符合多個條件「交集(AND)」的條件的commit log
		「檔案名稱」
			將commit log限制在某個檔案
	git reset
		「檔案／目錄名稱」
			重設「檔案／目錄名稱」的內容修改
		--hard
	git remote
		無參數
			顯示此內容倉庫(content repository)的遠端內容倉庫名稱
		-v --verbose
			多列出遠端內容倉庫(content repository)的網路位址
		add
			新增遠端內容倉庫(content repository)
		rm 「遠端repository名稱」
			移除遠端內容倉庫(content repository)的資訊（非移除遠端內容倉庫(content repository)本身）
			（rm應為remove的縮寫）
		show 遠端內容倉庫(content repository)名稱
			檢視遠端內容倉庫(content repository)的資訊
		rename 「原遠端repository名稱」 「新遠端repository名稱」
			重新命名遠端repository的參照(reference)名稱
		set-url 「遠端repository名稱」 「新遠端repository網址」
			重新設定遠端repository的網路位址
		prune （prune可用選項） 「遠端repository名稱」
			移除遠端內容倉庫中已不存在的分支(branch)的reference
				prune可用選項
					--dry-run
						只印出會被移除的分支
	git fetch
		「遠端repository名稱」
			將「遠端repository名稱」內容倉庫(content repository)的修改匯入到本地內容倉庫（未形成commit）
	git pull
		「遠端repository名稱」
			fetch並merge遠端repository中的修改
	git tag
		「tag名稱」
			建立一個lightweight標籤(tag)
		-l或--list '「tag patterns」'
			列出所有符合該pattern的標籤(tag)
		-a 「tag名稱」 -m '「tag的描述」'
			建立被注釋的(annotated)標籤(tag)
		-s 「tag名稱」 -m '「tag的描述」'
			建立一個被簽署的(signed)標籤(tag)
		-a 「tag名稱」 「commit的hash值」
			tag 一個過去的commit
	git checkout
		「branch名稱」
			切換到另一個branch的HEAD指向內容版本
		-b 「branch名稱」
			新增並切換到「分支名稱」
		 -- 「檔案路徑」
			（unstage檔案之後）將檔案的修改恢復到上次commit的狀態
	git merge
		「分支名稱」
			將「分支名稱」的內容變更與目前所在分支合併
	git branch
		（無參數）
			察看本地端的分支(branch)
		-r --remotes
			改為查看遠端分支
		「branch名稱」
			新建「branch名稱」分支(branch)
		-v --verbose
			察看分支時提供更詳細的資訊（如SHA1 checksum等）
		--merged
			顯示目前已經merge進其他分支的分支名稱，沒有標示*的分支可以安全刪除
		--no-merged
			顯示所有未merge進其他分支的分支名稱
		-d 「branch名稱」
			刪除一個分支
				當--remotes選項存在時為刪除遠端分支的reference而非實際刪除遠端分支，該操作可用git push 「程式碼倉庫」 :「分支名稱」來達成
				如果該分支的內容變更沒有合併(merge)到其他分支的話以策安全將不會實際刪除分支
		-D 「branch名稱」
			強制刪除一個未合併(merge)內容變更到其他分支的分支
	git push
		「遠端內容倉庫名稱」 「遠端內容倉庫分支名稱」
			將本地端目前所在分支的內容變更合併到遠端內容倉庫的指定分支中
		--set-upstream
			同時設定該遠端分支為預設push的分支
		「遠端repository名稱」 「tag名稱」
			將tag傳到遠端內容倉庫上
		將所有遠端內容倉庫沒有的tag傳到遠端內容倉庫上
		--tags
			將所有遠端內容倉庫沒有的tag傳到遠端內容倉庫上
		「遠端內容倉庫名稱」 :「遠端內容倉庫分支名稱」
			刪除遠端內容倉庫「遠端內容倉庫分支名稱」分支
	git cherry-pick
	git clean
		（無參數）
			在有--force選項時移除所有Git不認識的檔案（包括沒有納入版本控制以及未被忽略的檔案）
		--force
			實際進行移除
		--dry-run
			不實際移除檔案，印出將會進行的動作
		-X
			只移除被Git忽略的檔案
		-d
			如果目錄中包含另一個內容倉庫也進行移除
	git revert
		「commit名稱」
			回退某個commit