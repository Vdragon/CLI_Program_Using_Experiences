//智慧財產權歸屬：Ｖ字龍(Vdragon, pika1021@gmail.com)
//使用的智慧財產授權：
//  創用 CC 姓名標示-相同方式分享 台灣 授權條款 當前最新版本（下方所列的網址為該授權條款編輯當時的最新版本，可能與最新版本有些差異）
//  http://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW
//    您擁有的權利及義務簡單描述如下：
//      1.您必須於本作品之衍伸作品中標明本作品的智慧財產權歸屬者（格式如上）。
//      2.若您發佈本作品的衍伸作品您必須以相同的授權條款授權您的作品。
//      3.除了以上兩點以及此授權條款中定義的細節之外，您可以自由的使用本作品。
//      4.如果您需要使用本作品於授權條款所限制的範圍，歡迎來信(pika1021@gmail.com)洽詢。

//設定局域個人資料
git config user.name "「要取的名字」"

//設定廣域個人資料
git config --global user.name "「要取的名字」"

//設定局域電子郵件地址
git config user.email 「要設定的電子郵件地址」

//設定廣域電子郵件地址
git config --global user.email 「要設定的電子郵件地址」

//設定廣域diff工具
git config --global merge.tool 「使用的軟體路徑」
部份可用選項：vimdiff、gvimdiff

//設定編輯軟體
git config --global core.editor 「使用的軟體路徑」
部份可用選項：emacs、vi(m)

//顯示設定值
git config --list

//顯示特定設定值
git config 「設定值的名稱」
全域：--global

//檢視特定功能的說明
$ git help <verb>
$ git <verb> --help
$ man git-<verb>

////更新或加入已變更的檔案至index(staged area)中（尚未commit）（可用glob patterns）
//檔案
$ git add 「檔案名稱」
//目錄
$ git add 「目錄名稱」
//自動將有在commit中的檔案更新
git add -all

////將檔案自working tree及index中移除
//檔案
$ git rm 「檔案名稱」
//目錄
$ git rm -r 「目錄名稱」

//將檔案只從index(staging area)中移除
//檔案
git rm --cached 「檔案名稱」

//目錄
$ git rm -r --cached 「目錄名稱」

//globbing patterns
$ git rm --cached 「globbing patterns」

//將遠端repository複製到本地端
git clone 「repository的位址」
git clone 「repository的位址」 「要自訂的repository目錄」

//檢視已修改但未add進staging area的檔案差異
git diff

//檢視已修改且以add進staging area（仍尚未commit）的檔案差異
git diff --cached
git diff --staged

//將index(staged area)中的變更檔案commit至working tree
git commit
git commit -m '「此commit的描述」'

//commit更詳細的資料（包括diff）
git commit -v

//直接將先前commit所包含的檔案commit至working tree(不需要git add)
git commit --all

//移除所有沒有納入版本控制的檔案
git clean
-d 包括目錄
-d -f -f 包括內含repo的目錄
--dry-run 僅跑過一遍，不實際移除
