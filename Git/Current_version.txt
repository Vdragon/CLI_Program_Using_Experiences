##智慧財產權歸屬：Ｖ字龍(Vdragon, pika1021@gmail.com)
##使用的智慧財產授權：
##  創用 CC 姓名標示-相同方式分享 台灣 授權條款 當前最新版本（下方所列的網址為該授權條款編輯當時的最新版本，可能與最新版本有些差異）
##  http://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW
##    您擁有的權利及義務簡單描述如下：
##      1.您必須於本作品之衍伸作品中標明本作品的智慧財產權歸屬者（格式如上）。
##      2.若您發佈本作品的衍伸作品您必須以相同的授權條款授權您的作品。
##      3.除了以上兩點以及此授權條款中定義的細節之外，您可以自由的使用本作品。
##      4.如果您需要使用本作品於授權條款所限制的範圍，歡迎來信(pika1021@gmail.com)洽詢。

####git reset相關指令
##將檔案unstage
git reset HEAD -- 「檔案名稱」

##將repository回歸原先狀態
git reset --hard

####git remote相關指令
##顯示此repository的遠端repository
git remote

##顯示網址
git remote -v

##加入遠端repository
git remote add 「repository名稱」 「repository URL」

##檢視遠端repostitory的資訊
git remote show 「遠端repository名稱」

##重新命名遠端repository的參照(reference)名稱
git remote rename 「原遠端repository名稱」 「新遠端repository名稱」

##變更remote repository網址
git remote set-url 「遠端repository名稱」 「新遠端repository網址」
git remote set-url origin git://github.com/Vdragon/CLI_Program_Using_Experiences.git
####git fetch相關指令
##將遠端repository中才有的資料加入本地repository中（但在merge之前不會加入working tree）
git fetch 「遠端repository名稱」

####git pull相關指令
##fetch並merge遠端repository中才有的資料
git pull 「遠端repository名稱」

##移除遠端repository
git remote rm 「遠端repository名稱」

##列出所有符合該pattern的tag
git tag -l '「tag patterns」'

##建立被注釋的(annotated)tag
git tag -a 「tag名稱」 -m '「tag的描述」'

##建立一個被簽署的tag
git tag -s 「tag名稱」 -m '「tag的描述」'

##tag 一個過去的commit
git tag -a 「tag名稱」 「commit的hash值」

##建立一個lightweiht tag名稱
git tag 「tag名稱」

####git checkout相關指令
##切換到另一個branch
git checkout 「branch名稱」

##branch & checkout一個branch
git checkout -b 「branch名稱」

##（unstage檔案之後）將檔案的修改恢復到上次commit的狀態
git checkout -- 「檔案路徑」

####git merge相關指令
##將某branch與目前branch合併
git merge 「branch名稱」

##使用mergetool來處理conflict
git mergetool

####git branch相關指令
##新增一個新的branch
#存取local的branch
git branch 「branch名稱」
#存取remote tracking branch
git branch -r 「branch名稱」

##刪除一個branch
git branch -d 「branch名稱」

##強制刪除一個未merge到master的branch
git branch -D 「branch名稱」

##顯示目前repository中所有的分支及狀態
git branch

##顯示目前repository中所有的分支及狀態（加上每個commit的基本資訊）
git branch -v

##顯示目前已經merge進master(?)的branch名稱，沒有*的branch可以安全刪除
git branch --merged

##顯示所有未merge進master的branch
git branch --no-merged

####git push相關指令
##將本地repo push到upstream remote repo(?)
git push --set-upstream origin master

##將tag傳到遠端repository上
git push 「遠端repository名稱」 「tag名稱」

##將所有遠端repository沒有的tag傳到遠端repository上
git push 「遠端repository名稱」 --tags

##移除遠端repository的branch
git push 「遠端repository名稱」/「遠端repository branch名稱」

####git cherry-pick相關指令
##將某個commit拆分為多個commits
git cherry-pick 「commit名稱」

####git clean相關指令
##移除所有沒有納入版本控制的檔案
git clean

##加入--force才會實際執行
git clean --force

##不實際刪除檔案
git clean --force --dry-run

##包括沒有納入版本控制的目錄
git clean --force -d --dry-run

##包括內含repo的目錄
git clean  --force -d --force --dry-run 

##只移除在ignore規則中的檔案
git clean --force -X --dry-run

##git revert相關命令
#回退某個commit
git revert 「commit名稱」
