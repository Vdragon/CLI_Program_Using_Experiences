##智慧財產權歸屬：Ｖ字龍(Vdragon, pika1021@gmail.com)
##使用的智慧財產授權：
##  創用 CC 姓名標示-相同方式分享 台灣 授權條款 當前最新版本（下方所列的網址為該授權條款編輯當時的最新版本，可能與最新版本有些差異）
##  http://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW
##    您擁有的權利及義務簡單描述如下：
##      1.您必須於本作品之衍伸作品中標明本作品的智慧財產權歸屬者（格式如上）。
##      2.若您發佈本作品的衍伸作品您必須以相同的授權條款授權您的作品。
##      3.除了以上兩點以及此授權條款中定義的細節之外，您可以自由的使用本作品。
##      4.如果您需要使用本作品於授權條款所限制的範圍，歡迎來信(pika1021@gmail.com)洽詢。

####git config相關指令
##設定局域個人資料
git config user.name "「要取的名字」"

##設定廣域個人資料
git config --global user.name "「要取的名字」"

##設定局域電子郵件地址
git config user.email 「要設定的電子郵件地址」

##設定廣域電子郵件地址
git config --global user.email 「要設定的電子郵件地址」

##設定廣域diff工具
git config --global merge.tool 「使用的軟體路徑」
部份可用選項：vimdiff、gvimdiff

##設定編輯軟體
git config --global core.editor 「使用的軟體路徑」
部份可用選項：emacs、vi(m)

##顯示設定值
git config --list

##顯示特定設定值
git config 「設定值的名稱」
全域：--global

####git help相關指令
##檢視特定功能的說明
git help <verb>
git <verb> --help
man git-<verb>

####git add相關指令
##更新或加入已變更的檔案至index(staged area)中（尚未commit）（可用glob patterns）
git add 「檔案名稱」
git add 「目錄名稱」

##自動將有在commit中的檔案更新
git add -all

####git rm相關指令
##將檔案自working tree及index中移除
git rm 「檔案名稱」
git rm -r 「目錄名稱」

##globbing patterns（「*」需要escape才能使用）
git rm 「globbing patterns」

##將檔案只從index(staging area)中移除
git rm --cached 「檔案名稱」
git rm -r --cached 「目錄名稱」
git rm --cached 「globbing patterns」

##將遠端repository複製到本地端
git clone 「repository的位址」
git clone 「repository的位址」 「要自訂的repository目錄」

####git diff相關指令
##檢視已修改但未add進staging area的檔案差異
git diff

##檢視已修改且以add進staging area（仍尚未commit）的檔案差異
git diff --cached
git diff --staged

####git commit相關指令
##將index(staged area)中的變更檔案commit至working tree
git commit
git commit -m '「此commit的描述」'

##commit更詳細的資料（包括diff）
git commit -v

##修改最後的commit
git commit --amend
##git commit -m 'initial commit'
##git add forgotten_file
##git commit --amend

##直接將先前commit所包含的檔案commit至working tree(不需要git add)
git commit --all

####git mv相關指令
####更名
git mv 「更名前檔案名稱」 「更名後檔案名稱」

####git log相關指令
##檢視commit紀錄
git log

##檢視包含diff的commit紀錄
git log -p

##追加顯示統計圖
git log --stat

##以特定格式顯示commit log
git log --pretty=
##參數：oneline, short, full, fuller
##輸出自訂格式commit log
git log --pretty=format:"「format controll string」"
##Option  Description of Output
##%H  Commit hash
##%h  Abbreviated commit hash
##%T  Tree hash
##%t  Abbreviated tree hash
##%P  Parent hashes
##%p  Abbreviated parent hashes
##%an Author name
##%ae Author e-mail
##%ad Author date (format respects the –date= option)
##%ar Author date, relative
##%cn Committer name
##%ce Committer email
##%cd Committer date
##%cr Committer date, relative
##%s  Subject

##繪出commit圖
git log --pretty=oneline --graph
git log --pretty=format:"「format controll string」" --graph

##檢視最後兩筆commit紀錄
git log -2

##檢視多久時間以前之後的commit log
git log --since=「時間」
##2.weeks
##2008-01-15
##2 years 1 day 3 minutes ago

##檢視多久時間以前之前的commit log
git log --until=「時間」

##檢視特定作者的commit
git log --author 「作者名稱」

##以特定關鍵字搜索commit log
git log --grep 「關鍵字」

##輸出符合多個條件「交集」的條件的commit log
git log 「多個條件」 --all-match

##將commit log限制在某個檔案
git log 「其他條件」 「檔案名稱」

####git reset相關指令
##將檔案unstage
git reset HEAD -- 「檔案名稱」

####git remote相關指令
##顯示此repository的遠端repository
git remote

##顯示網址
git remote -v

##加入遠端repository
git remote add 「repository名稱」 「repository URL」

##檢視遠端repostitory的資訊
git remote show 「遠端repository名稱」

##重新命名遠端repository的參照(reference)名稱
git remote rename 「原遠端repository名稱」 「新遠端repository名稱」

##變更remote repository網址
git remote set-url 「遠端repository名稱」 「新遠端repository網址」
git remote set-url origin git://github.com/Vdragon/CLI_Program_Using_Experiences.git
####git fetch相關指令
##將遠端repository中才有的資料加入本地repository中（但在merge之前不會加入working tree）
git fetch 「遠端repository名稱」

####git pull相關指令
##fetch並merge遠端repository中才有的資料
git pull 「遠端repository名稱」

##移除遠端repository
git remote rm 「遠端repository名稱」

##列出所有符合該pattern的tag
git tag -l '「tag patterns」'

##建立被注釋的(annotated)tag
git tag -a 「tag名稱」 -m '「tag的描述」'

##建立一個被簽署的tag
git tag -s 「tag名稱」 -m '「tag的描述」'

##tag 一個過去的commit
git tag -a 「tag名稱」 「commit的hash值」

##建立一個lightweiht tag名稱
git tag 「tag名稱」

####git checkout相關指令
##切換到另一個branch
git checkout 「branch名稱」

##branch & checkout一個branch
git checkout -b 「branch名稱」

##（unstage檔案之後）將檔案的修改恢復到上次commit的狀態
git checkout -- 「檔案名稱」

####git merge相關指令
##將某branch與目前branch合併
git merge 「branch名稱」

##使用mergetool來處理conflict
git mergetool

####git branch相關指令
##新增一個新的branch
git branch 「branch名稱」

##刪除一個branch
git branch -d 「branch名稱」

##強制刪除一個未merge到master的branch
git branch -D 「branch名稱」

##顯示目前repository中所有的分支及狀態
git branch

##顯示目前repository中所有的分支及狀態（加上每個commit的基本資訊）
git branch -v

##顯示目前已經merge進master(?)的branch名稱，沒有*的branch可以安全刪除
git branch --merged

##顯示所有未merge進master的branch
git branch --no-merged

####git push相關指令
##將本地repo push到upstream remote repo(?)
git push --set-upstream origin master

##將tag傳到遠端repository上
git push 「遠端repository名稱」 「tag名稱」

##將所有遠端repository沒有的tag傳到遠端repository上
git push 「遠端repository名稱」 --tags

####git cherry-pick相關指令
##將某個commit拆分為多個commits
git cherry-pick 「commit名稱」

####git clean相關指令
##移除所有沒有納入版本控制的檔案
git clean
-d 包括目錄
-d -f -f 包括內含repo的目錄
--dry-run 僅跑過一遍，不實際移除
